name: build-and-push

on:
  push:
    tags:
      - "**.**.**"
      - feature/**/**
      - experiment/**/**/**
    paths:
      - src/**
      - scripts/**
      - .github/workflows/build-and-push.yml
  workflow_dispatch:

env:
  BASE_IMAGE_TAG: latest
  CONTAINER_NAME: react-native-android-devcontainer
  DOCKERFILE: src/Dockerfile.android.dev
  CACHE_TO_DEST: /tmp/.buildx-cache-new
  CACHE_FROM_SRC: /tmp/.buildx-cache
  USER_NAME: rn
  USER_GROUP: rn
  USER_ID: 1000
  GROUP_ID: 1000

jobs:
  build-and-push:
    name: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v25
        with:
          files: |
            src/**
            scripts/**
            .github/workflows/build-and-push.yml

      - name: Declare run state
        id: run_state
        run: |
          if [ ${{ steps.changed_files.outputs.any_modified }} == true ] || \
            [ ${{ github.event_name }} == workflow_dispatch ] || \
            [ ${{ steps.latest_tag.outputs.tag }} != tag-unavailable ];
          then
            echo "::set-output name=run_docker_build::true"
            echo "::debug::Docker build will carry out as expected."
          else
            echo "::set-output name=run_docker_build::false"
            echo "Docker build is cancelled as the required conditions for a run haven't been met"
          fi

      - name: Create variables
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: variables
        run: |
          image_name=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}
          repo_tag=${{ github.ref_name }}
          image_tag=${repo_tag//\//-}
          dev_image_tag=${image_tag}
          image_ref="${image_name}:${image_tag}"
          dev_image_ref="${image_name}:${dev_image_tag}"
          short_image_ref="${{ env.CONTAINER_NAME }}:${image_tag}"
          short_dev_image_ref="${{ env.CONTAINER_NAME }}:${dev_image_tag}"

          for i in \
            image_name \
            image_tag \
            dev_image_tag \
            image_ref \
            dev_image_ref \
            short_image_ref \
            short_dev_image_ref; 
          do 
            echo "$i=${!i}" >> $GITHUB_OUTPUT; 
          done

      - name: Set up Docker Buildx
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ${{ steps.variables.outputs.short_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.variables.outputs.image_ref }}
          file: ${{ env.DOCKERFILE }}
          push: true
          pull: false
          cache-from: type=local,src=${{ env.CACHE_FROM_SRC }}
          cache-to: type=local,mode=max,dest=${{ env.CACHE_TO_DEST }}
          build-args: |
            BASE_IMAGE_TAG=${{ env.BASE_IMAGE_TAG }}
            ROOT_PASS=${{ secrets.DOCKER_IMAGE_ROOT_PASS }}
            USER_PASS=${{ secrets.DOCKER_IMAGE_USER_PASS }}
            USER_NAME=${{ env.USER_NAME }}
            USER_GROUP=${{ env.USER_GROUP }}
            USER_ID=${{ env.USER_ID }}
            GROUP_ID=${{ env.GROUP_ID }}

      - name: Build devcontainer ${{ steps.variables.outputs.short_dev_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: devcontainer_build
        uses: devcontainers/ci@v0.2
        env:
          IMAGE_NAME: ${{ steps.variables.outputs.image_name }}
          IMAGE_TAG: ${{ steps.variables.outputs.image_tag }}
        with:
          imageName: ${{ steps.variables.outputs.image_name }}
          imageTag: ${{ steps.variables.outputs.image_tag }}
          subFolder: src
          runCmd: /scripts/devcontainer-check.sh

      - name: Push devcontainer ${{ steps.variables.outputs.short_dev_image_ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        run: docker push ${{ steps.variables.outputs.image_ref }}

      - name: Set Docker Hub description
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ steps.variables.outputs.image_name }}
          short-description: React Native devcontainers
          readme-filepath: src/DOCKER_README.md

      - name: Move cache
        if: steps.run_state.outputs.run_docker_build == 'true'
        run: |
          rm -rf ${{ env.CACHE_FROM_SRC }}
          if [ -d ${{ env.CACHE_FROM_SRC }} ];
          then
            mv ${{ env.CACHE_TO_DEST }} ${{ env.CACHE_FROM_SRC }}
          fi

      - name: Telegram notifications
        if: always()
        uses: utkusarioglu/telegram-notifications@main
        with:
          telegram_id: ${{ secrets.TELEGRAM_ID }}
          telegram_token: ${{ secrets.TELEGRAM_TOKEN }}
          job_status: ${{ job.status }}
          github_context: ${{ toJson(github) }}
